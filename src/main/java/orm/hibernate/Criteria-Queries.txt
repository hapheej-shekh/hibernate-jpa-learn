		Criteria Queries
	------------------------

Criteria cr = session.createCriteria(Employee.class);
List results = cr.list();


Restrictions with Criteria
--------------------------
The add() method available for Criteria object to add restriction for criteria query

Criteria cr = session.createCriteria(Employee.class);
cr.add(Restrictions.eq("salary", 2000));
List results = cr.list();


// To get records having salary more than 2000
cr.add(Restrictions.gt("salary", 2000));

// To get records having salary less than 2000
cr.add(Restrictions.lt("salary", 2000));

// To get records having fistName starting with zara
cr.add(Restrictions.like("firstName", "zara%"));

// Case sensitive form of the above restriction.
cr.add(Restrictions.ilike("firstName", "zara%"));

// To get records having salary in between 1000 and 2000
cr.add(Restrictions.between("salary", 1000, 2000));

// To check if the given property is null
cr.add(Restrictions.isNull("salary"));

// To check if the given property is not null
cr.add(Restrictions.isNotNull("salary"));

// To check if the given property is empty
cr.add(Restrictions.isEmpty("salary"));



AND or OR
---------

Criteria cr = session.createCriteria(Employee.class);

Criterion salary = Restrictions.gt("salary", 2000);
Criterion name = Restrictions.ilike("firstNname","zara%");

// To get records matching with OR conditions
LogicalExpression orExp = Restrictions.or(salary, name);
cr.add( orExp );

// To get records matching with AND conditions
LogicalExpression andExp = Restrictions.and(salary, name);
cr.add( andExp );

List results = cr.list();


Pagination
----------
Criteria cr = session.createCriteria(Employee.class);
cr.setFirstResult(1);
cr.setMaxResults(10);
List results = cr.list();


Result Sorting
--------------
Criteria cr = session.createCriteria(Employee.class);

// To get records having salary more than 2000
cr.add(Restrictions.gt("salary", 2000));

// To sort records in descening order
cr.addOrder(Order.desc("salary"));

// To sort records in ascending order
cr.addOrder(Order.asc("salary"));

List results = cr.list();


Projections & Aggregations
--------------------------
Criteria API provides Projections class,
which can be used to get average, maximum, or minimum of property values


Criteria cr = session.createCriteria(Employee.class);

// To get total row count.
cr.setProjection(Projections.rowCount());

// To get average of a property.
cr.setProjection(Projections.avg("salary"));

// To get distinct count of a property.
cr.setProjection(Projections.countDistinct("firstName"));

// To get maximum of a property.
cr.setProjection(Projections.max("salary"));

// To get minimum of a property.
cr.setProjection(Projections.min("salary"));

// To get sum of a property.
cr.setProjection(Projections.sum("salary"));

-------------------------

| Feature        | API                                               |
| -------------- | ------------------------------------------------- |
| `Restrictions` | `cb.gt()`, `cb.equal()`, `cb.and()`               |
| `Ordering`     | `cb.asc()`, `cb.desc()`                           |
| `Projection`   | `cq.multiselect()`                                |
| `Aggregation`  | `cb.sum()`, `cb.avg()`, `cb.max()`                |
| `Group By`     | `cq.groupBy()`                                    |
| `Having`       | `cq.having()`                                     |
| `Pagination`   | `query.setFirstResult()`, `query.setMaxResults()` |
